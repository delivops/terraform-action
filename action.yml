name: 'delivops-github-action-terraform'
description: 'Fully automated Terraform GitHub Action: fmt, init, validate, plan, apply.'
author: 'delivops'
branding:
  icon: 'cloud'
  color: 'purple'
inputs:
  working_directory:
    description: 'Directory containing Terraform configuration'
    required: true
  aws_region:
    description: 'AWS Region'
    required: true
  aws_role:
    description: 'AWS Role to assume for authentication'
    required: true
  terraform_version:
    description: 'Terraform version to install'
    required: false
    default: '1.9.8'
  environment:
    description: 'Terraform environment' 
    required: true  
  aws_account_id:
    required: true
  github_token:
    description: 'GitHub token'
    required: true 

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume:  "arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role }}"
        aws-region: ${{ inputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform fmt check
      id: fmt
      shell: bash
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      shell: bash
      run: terraform init || terraform init -upgrade
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Plan
      id: plan
      shell: bash
      run: terraform plan -no-color
      working-directory: ${{ inputs.working_directory }}
      if: github.event_name == 'pull_request'
      continue-on-error: true      

    - name: Process Plan Output
      id: process_plan
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        # Get the plan output
        PLAN_OUTPUT="${{ steps.plan.outputs.stdout }}"
        
        # Set maximum lines for truncated output (keeping summary visible)
        MAX_LINES=100
        
        # Count total lines in plan
        TOTAL_LINES=$(echo "$PLAN_OUTPUT" | wc -l)
        
        if [ "$TOTAL_LINES" -gt "$MAX_LINES" ]; then
          # Plan is too long, truncate from the top but keep the summary
          echo "PLAN_TRUNCATED=true" >> $GITHUB_OUTPUT
          
          # Get the last 50 lines (which typically contain the summary)
          TRUNCATED_PLAN=$(echo "$PLAN_OUTPUT" | tail -n 50)
          
          # Create truncated plan with notice
          PROCESSED_PLAN="**⚠️ Plan output was truncated due to length. View the complete plan in the job logs.**

        ... (output truncated) ...

        $TRUNCATED_PLAN"
        else
          echo "PLAN_TRUNCATED=false" >> $GITHUB_OUTPUT
          PROCESSED_PLAN="$PLAN_OUTPUT"
        fi
        
        # Save processed plan to output (use base64 to handle special characters)
        echo "PROCESSED_PLAN=$(echo "$PROCESSED_PLAN" | base64 -w 0)" >> $GITHUB_OUTPUT

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const environment = "${{ inputs.environment }}";
          const planTruncated = "${{ steps.process_plan.outputs.PLAN_TRUNCATED }}" === "true";
          const processedPlan = Buffer.from("${{ steps.process_plan.outputs.PROCESSED_PLAN }}", 'base64').toString('utf-8');
          
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
    
          const botComment = comments.find(comment => comment.body.includes(`## Terraform ${environment}`));
          
          let planSection = "#### Terraform Plan 📖 `${{ steps.plan.outcome }}`\n\n" +
            "<details><summary>Show Plan</summary>\n\n" +
            "```terraform\n" + processedPlan + "\n```\n\n" +
            "</details>";
          
          if (planTruncated) {
            planSection += "\n\n> 💡 **Tip**: The plan output was truncated due to its length. " +
              "To view the complete plan output, check the \"Terraform Plan\" step in the " +
              "[job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).";
          }
    
          const output = "## Terraform " + environment + "\n" +
            "#### Terraform Format and Style 🖌 `${{ steps.fmt.outcome }}`\n" +
            "#### Terraform Initialization ⚙️ `${{ steps.init.outcome }}`\n" +
            "#### Terraform Validation 🤖 `${{ steps.validate.outcome }}`\n" +
            "<details><summary>Validation Output</summary>\n\n" +
            "```\n${{ steps.validate.outputs.stdout }}```\n\n" +
            "</details>\n\n" +
            planSection + "\n\n" +
            "*Pushed by: @${{ github.actor }}, Action: `${{ github.event_name }}`*";
    
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });
          }

    - name: Fail if Plan Failed
      if: steps.plan.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: Terraform Apply
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name == 'push'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: terraform apply -auto-approve -input=false
