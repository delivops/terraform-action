name: 'delivops-github-action-terraform'
description: 'Fully automated Terraform GitHub Action: fmt, init, validate, plan, apply.'
author: 'delivops'
branding:
  icon: 'cloud'
  color: 'purple'
inputs:
  working_directory:
    description: 'Directory containing Terraform configuration'
    required: true
  aws_region:
    description: 'AWS Region'
    required: true
  aws_role:
    description: 'AWS Role to assume for authentication'
    required: true
  terraform_version:
    description: 'Terraform version to install'
    required: false
    default: '1.9.8'
  environment:
    description: 'Terraform environment' 
    required: true  
  aws_account_id:
    required: true
  github_token:
    description: 'GitHub token'
    required: true 

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume:  "arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role }}"
        aws-region: ${{ inputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform fmt check
      id: fmt
      shell: bash
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      shell: bash
      run: terraform init || terraform init -upgrade
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Validate
      id: validate
      shell: bash
      run: |
        terraform validate -no-color > /tmp/terraform-outputs-validate.txt 2>&1
        echo "outcome=$([ $? -eq 0 ] && echo 'success' || echo 'failure')" >> $GITHUB_OUTPUT
      working-directory: ${{ inputs.working_directory }}
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      shell: bash
      run: |
        if terraform plan -no-color -input=false -out=/tmp/terraform-outputs-plan.tfplan; then
          echo "outcome=success" >> $GITHUB_OUTPUT
        else
          echo "outcome=failure" >> $GITHUB_OUTPUT
        fi
        # Convert (even failed) binary plan to human-readable text for processing
        terraform show -no-color /tmp/terraform-outputs-plan.tfplan > /tmp/terraform-outputs-plan.txt 2>&1 || echo "Plan failed" > /tmp/terraform-outputs-plan.txt
      working-directory: ${{ inputs.working_directory }}
      if: github.event_name == 'pull_request' && steps.validate.outputs.outcome == 'success'
      continue-on-error: true

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        VALIDATE_OUTCOME: ${{ steps.validate.outputs.outcome }}
        PLAN_OUTCOME: ${{ steps.plan.outputs.outcome }}
        ENVIRONMENT: ${{ inputs.environment }}
        FMT_OUTCOME: ${{ steps.fmt.outcome }}
        INIT_OUTCOME: ${{ steps.init.outcome }}
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');
          const environment = process.env.ENVIRONMENT;
          let hasTruncation = false;
          
          // Helper to safely read file; returns empty string on error
          function readFileSafe(path) {
            try { return fs.readFileSync(path, 'utf8'); } catch(_) { return ''; }
          }
          // Function to process terraform output
          function processOutput(content) {
            if (!content || content.trim() === '' || content === 'null') {
              return 'No output available';
            }
            const lines = content.split('\n');
            const indicators = [
              'Note: Objects have changed outside of Terraform',
              'Terraform will perform the following actions:',
              'No changes. Your infrastructure matches the configuration.',
              'Planning failed. Terraform encountered an error while generating this plan.',
              'Plan:',
              'Changes to Outputs:'
            ];
            let idx = lines.findIndex(l => indicators.some(ind => l.includes(ind)));
            const relevant = idx >= 0 ? lines.slice(idx) : lines;
            if (relevant.length > 100) {
              hasTruncation = true;
              return `... (${relevant.length - 100} lines truncated) ...\n\n${relevant.slice(-100).join('\n')}`;
            }
            return relevant.join('\n');
          }
          const validateOutput = processOutput(readFileSafe('/tmp/terraform-outputs-validate.txt'));
          const planOutput = processOutput(readFileSafe('/tmp/terraform-outputs-plan.txt'));
          
          let planSection;
          if (process.env.VALIDATE_OUTCOME === 'failure') {
            planSection = `#### Terraform Plan üìñ \`skipped\` ‚è≠Ô∏è\n\n<details><summary>Validation Failed - Show Details</summary>\n\n\n\`\`\`\n${validateOutput}\n\`\`\`\n\n</details>\n\n> ‚ùå **Terraform validation failed!** Fix the errors above before merging.`;
          } else if (process.env.PLAN_OUTCOME === 'success') {
            planSection = `#### Terraform Plan üìñ \`success\` ‚úÖ\n\n<details><summary>Show Plan</summary>\n\n\n\`\`\`terraform\n${planOutput}\n\`\`\`\n\n</details>`;
          } else if (process.env.PLAN_OUTCOME === 'failure') {
            planSection = `#### Terraform Plan üìñ \`failure\` ‚ùå\n\n<details><summary>Plan Failed - Show Details</summary>\n\n\n\`\`\`\n${planOutput}\n\`\`\`\n\n</details>\n\n> ‚ùå **Terraform plan failed!** Fix the errors above before merging.`;
          } else {
            planSection = '#### Terraform Plan üìñ `skipped` ‚è≠Ô∏è\n\n> Plan was skipped due to validation failure.';
          }
          const comment = `## Terraform ${environment}\n#### Terraform Format and Style üñå \`${process.env.FMT_OUTCOME}\`\n#### Terraform Initialization ‚öôÔ∏è \`${process.env.INIT_OUTCOME}\`\n#### Terraform Validation ü§ñ \`${process.env.VALIDATE_OUTCOME}\`\n\n<details><summary>Validation Output</summary>\n\n\n\`\`\`\n${validateOutput}\n\`\`\`\n\n</details>\n\n${planSection}\n\n*Pushed by: @${context.actor}, Action: \`${context.eventName}\`*${hasTruncation ? `\n\n**‚ö†Ô∏è Output truncated due to length. [View full logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}).**` : ''}`;
          const { data: comments } = await github.rest.issues.listComments({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo });
          
          const botComment = comments.find(c => c.body.includes(`## Terraform ${environment}`));
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Fail if Plan Failed
      if: steps.plan.outputs.outcome == 'failure' || steps.validate.outputs.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: Terraform Apply
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name == 'push'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: terraform apply -auto-approve -input=false