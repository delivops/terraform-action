name: 'delivops-github-action-terraform'
description: 'Fully automated Terraform GitHub Action: fmt, init, validate, plan, apply.'
author: 'delivops'
branding:
  icon: 'cloud'
  color: 'purple'
inputs:
  working_directory:
    description: 'Directory containing Terraform configuration'
    required: true
  aws_region:
    description: 'AWS Region'
    required: true
  aws_role:
    description: 'AWS Role to assume for authentication'
    required: true
  terraform_version:
    description: 'Terraform version to install'
    required: false
    default: '1.9.8'
  environment:
    description: 'Terraform environment' 
    required: true  
  aws_account_id:
    required: true
  github_token:
    description: 'GitHub token'
    required: true 

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume:  "arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.aws_role }}"
        aws-region: ${{ inputs.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Terraform fmt check
      id: fmt
      shell: bash
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      shell: bash
      run: terraform init || terraform init -upgrade
      working-directory: ${{ inputs.working_directory }}

    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color
      working-directory: ${{ inputs.working_directory }}
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      shell: bash
      run: terraform plan -no-color
      working-directory: ${{ inputs.working_directory }}
      if: github.event_name == 'pull_request' && steps.validate.outcome == 'success'
      continue-on-error: true      

    - name: Process Plan Output
      id: process_plan
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        # Check if validate failed first
        if [ "${{ steps.validate.outcome }}" == "failure" ]; then
          echo "PLAN_STATUS=validate_failed" >> $GITHUB_OUTPUT
          echo "PLAN_TRUNCATED=false" >> $GITHUB_OUTPUT
        # Check if plan succeeded or failed
        elif [ "${{ steps.plan.outcome }}" == "success" ]; then
          echo "PLAN_STATUS=success" >> $GITHUB_OUTPUT
          # Get the plan output and check length
          PLAN_OUTPUT="${{ steps.plan.outputs.stdout }}"
          TOTAL_LINES=$(echo "$PLAN_OUTPUT" | wc -l)
          
          if [ "$TOTAL_LINES" -gt "100" ]; then
            echo "PLAN_TRUNCATED=true" >> $GITHUB_OUTPUT
            # Get the last 50 lines for summary
            echo "$PLAN_OUTPUT" | tail -n 50 > /tmp/truncated_plan.txt
          else
            echo "PLAN_TRUNCATED=false" >> $GITHUB_OUTPUT
            echo "$PLAN_OUTPUT" > /tmp/full_plan.txt
          fi
        elif [ "${{ steps.plan.outcome }}" == "failure" ]; then
          echo "PLAN_STATUS=plan_failed" >> $GITHUB_OUTPUT
          echo "PLAN_TRUNCATED=false" >> $GITHUB_OUTPUT
        else
          echo "PLAN_STATUS=skipped" >> $GITHUB_OUTPUT
          echo "PLAN_TRUNCATED=false" >> $GITHUB_OUTPUT
        fi

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const environment = "${{ inputs.environment }}";
          const planTruncated = "${{ steps.process_plan.outputs.PLAN_TRUNCATED }}" === "true";
          const planStatus = "${{ steps.process_plan.outputs.PLAN_STATUS }}";
          
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
    
          const botComment = comments.find(comment => comment.body.includes(`## Terraform ${environment}`));
          
          let planSection;
          
          if (planStatus === "validate_failed") {
            const validateError = `${{ steps.validate.outputs.stderr }}` || `${{ steps.validate.outputs.stdout }}`;
            planSection = "#### Terraform Plan 📖 `skipped` ⏭️\n\n" +
              "<details><summary>Show Validation Error Details</summary>\n\n" +
              "```\n" + validateError + "\n```\n\n" +
              "</details>\n\n" +
              "> ⚠️ **Terraform validation failed!** Please fix the configuration errors above before merging.\n\n" +
              "> 📋 **View full logs**: Check the \"Terraform Validate\" step in the [job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for complete details.";
          } else if (planStatus === "success") {
            const planOutput = `${{ steps.plan.outputs.stdout }}`;
            let displayPlan = planOutput;
            
            if (planTruncated) {
              // For truncated plans, show truncation notice and link to logs
              displayPlan = "**⚠️ Plan output was truncated due to length. View the complete plan in the job logs.**\n\n... (output truncated) ...\n\n" + 
                planOutput.split('\n').slice(-50).join('\n');
            }
            
            planSection = "#### Terraform Plan 📖 `success` ✅\n\n" +
              "<details><summary>Show Plan</summary>\n\n" +
              "```terraform\n" + displayPlan + "\n```\n\n" +
              "</details>";
            
            if (planTruncated) {
              planSection += "\n\n> 💡 **Tip**: The plan output was truncated due to its length. " +
                "To view the complete plan output, check the \"Terraform Plan\" step in the " +
                "[job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).";
            }
          } else if (planStatus === "plan_failed") {
            const planError = `${{ steps.plan.outputs.stderr }}` || `${{ steps.plan.outputs.stdout }}`;
            planSection = "#### Terraform Plan 📖 `failure` ❌\n\n" +
              "<details><summary>Show Error Details</summary>\n\n" +
              "```\n" + planError + "\n```\n\n" +
              "</details>\n\n" +
              "> ⚠️ **Terraform plan failed!** Please fix the configuration errors above before merging.\n\n" +
              "> 📋 **View full logs**: Check the \"Terraform Plan\" step in the [job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for complete details.";
          } else {
            planSection = "#### Terraform Plan 📖 `skipped` ⏭️\n\n" +
              "> Plan was skipped due to validation failure.";
          }
    
          const output = "## Terraform " + environment + "\n" +
            "#### Terraform Format and Style 🖌 `${{ steps.fmt.outcome }}`\n" +
            "#### Terraform Initialization ⚙️ `${{ steps.init.outcome }}`\n" +
            "#### Terraform Validation 🤖 `${{ steps.validate.outcome }}`\n" +
            "<details><summary>Validation Output</summary>\n\n" +
            "```\n${{ steps.validate.outputs.stdout }}```\n\n" +
            "</details>\n\n" +
            planSection + "\n\n" +
            "*Pushed by: @${{ github.actor }}, Action: `${{ github.event_name }}`*";
    
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output,
            });
          }

    - name: Fail if Plan Failed
      if: steps.plan.outcome == 'failure' || steps.validate.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: Terraform Apply
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name == 'push'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: terraform apply -auto-approve -input=false
